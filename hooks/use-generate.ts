import chalk from 'chalk'
import { readFileSync, writeFileSync } from 'node:fs'
import { parse, stringify } from 'yaml'
import config from '../scripts/config.ts'

const useGenerate = (option: UseGenerateOption) => {
  const configYaml = parse(readFileSync('resources/config.yaml', 'utf-8'))

  const configRules = parse(readFileSync('resources/rules.yaml', 'utf-8'))

  Object.keys(option).forEach((key) => {
    const proxyNodes = option[key]

    if (!proxyNodes || !Array.isArray(proxyNodes) || proxyNodes.length === 0) {
      const message = chalk.redBright.italic.underline(
        `\nNo data provided for ${key}.yaml`
      )

      console.error(message)

      return
    }

    const proxyNodeNames = proxyNodes.map((item) => item.name)

    const proxyGroups = [
      {
        name: 'PROXY',
        type: 'select',
        proxies: ['CLASH', ...proxyNodeNames]
      },
      {
        name: 'CLASH',
        type: 'url-test',
        url: 'http://www.gstatic.com/generate_204',
        proxies: proxyNodeNames,
        interval: 300,
        tolerance: 50
      }
    ]

    configYaml.proxies = proxyNodes

    configYaml['proxy-groups'] = proxyGroups

    configYaml.rules = configRules

    writeFileSync(
      `resources/${key}.yaml`,
      `# Generated by ${config.author}\n\n${stringify(configYaml)}`,
      'utf-8'
    )

    const message = chalk.greenBright.italic.underline(
      `\nGenerated ${key}.yaml successfully!`
    )

    console.log(message)
  })
}

export default useGenerate
