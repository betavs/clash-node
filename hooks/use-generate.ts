import chalk from 'chalk'
import { readFileSync, writeFileSync } from 'node:fs'
import { parse, stringify } from 'yaml'
import config from '../scripts/config.ts'

const useGenerate = (option: ClashNode.UseGenerateOption) => {
  const yaml = parse(readFileSync('resources/config.yaml', 'utf-8'))

  const rules = parse(readFileSync('resources/rules.yaml', 'utf-8'))

  Object.keys(option).forEach((filename) => {
    const data = option[filename]

    if (!data || !Array.isArray(data) || data.length === 0) {
      const message = chalk.redBright.italic.underline(
        `\nNo data provided for ${filename}.yaml`
      )

      console.error(message)

      return
    }

    const names = data.map((item) => item.name)

    const groups = [
      {
        name: 'PROXY',
        type: 'select',
        proxies: ['CLASH', ...names]
      },
      {
        name: 'CLASH',
        type: 'url-test',
        url: 'http://www.gstatic.com/generate_204',
        proxies: names,
        interval: 300,
        tolerance: 50
      }
    ]

    yaml.proxies = data

    yaml['proxy-groups'] = groups

    yaml.rules = rules

    writeFileSync(
      `resources/${filename}.yaml`,
      `# Generated by ${config.author}\n\n${stringify(yaml)}`,
      'utf-8'
    )

    const message = chalk.greenBright.italic.underline(
      `\nGenerated ${filename}.yaml successfully!`
    )

    console.log(message)
  })
}

export default useGenerate
