import { readFileSync, writeFileSync } from 'fs'

import { parse, stringify } from 'yaml'

import * as cheerio from 'cheerio'

// @ts-ignore
import config from './config.ts'

const render = async (url: string) => {
  const response = await fetch(url)

  const text = await response.text()

  return cheerio.load(text)
}

const decode = (encode: string) => {
  const text = Buffer.from(encode, 'base64').toString('utf-8')

  const list = text
    .split('\n')
    .map((item) => item.trim())
    .filter((item) => item)

  const regexp = /^(\w+):\/\/(\w+)@([\w\.-]+):(\d+)#(.+)$/

  const proxies: ProxyNode[] = []

  list.forEach((item) => {
    const match = decodeURIComponent(item).match(regexp)

    if (!match) return

    const [, type, secret, server, port, name] = match

    const [cipher, password] = Buffer.from(secret, 'base64')
      .toString('utf-8')
      .split(':')

    const proxy = {
      name,
      type,
      server,
      port: parseInt(port, 10),
      cipher,
      password,
      udp: true,
    }

    proxies.push(proxy)
  })

  return proxies
}

const generate = (data: ProxyNode[]) => {
  const yaml = parse(readFileSync('resources/config.yaml', 'utf-8'))

  const rules = parse(readFileSync('resources/rules.yaml', 'utf-8'))

  const names = data.map((item) => item.name)

  const groups = [
    {
      name: 'PROXY',
      type: 'select',
      proxies: ['CLASH', ...names],
    },
    {
      name: 'CLASH',
      type: 'url-test',
      url: 'http://www.gstatic.com/generate_204',
      proxies: names,
      interval: 300,
      tolerance: 50,
    },
  ]

  yaml.proxies = data

  yaml['proxy-groups'] = groups

  yaml.rules = rules

  return stringify(yaml)
}

const handler = async (data: string[]) => {
  const random = Math.floor(Math.random() * data.length)

  const encode = (await render(data[random])).text()

  const regexp = /.+\=(.+)$/

  const nodes = data
    .map((item, index) => {
      const num = index + 1

      const token = item.match(regexp)?.[1]

      return `| ${num} | [${token}](${item}) |`
    })
    .join('\n')

  const content = `# ${config.name}\n\n${config.description}\n\n`

  const subscribe = `> Subscribe Url: [${config.name}](https://betavs.github.io/${config.name}/resources/${config.name}.yaml)\n\n`

  const table = `| No. | Proxy |\n| :---: | :-----: |\n${nodes}\n`

  const readme = `${content}${subscribe}${table}`

  return { encode, readme }
}

const update = ({ readme, yaml }: Record<string, string>) => {
  writeFileSync('README.md', readme, 'utf-8')

  writeFileSync(
    `resources/${config.name}.yaml`,
    `# Generated by ${config.author}\n\n${yaml}`,
    'utf-8',
  )
}

const main = async () => {
  const page = await render(config.site)

  const link = page('.content-layout a.media-content')[0].attribs.href

  const body = await render(link)

  const text = body('.content-layout .panel-body').text()

  const list = text.split('\n').map((item) => item.trim())

  const data = list.filter((item) => config.regexp.test(item))

  const { encode, readme } = await handler(data)

  const proxies = decode(encode)

  const yaml = generate(proxies)

  update({ readme, yaml })
}

main()
